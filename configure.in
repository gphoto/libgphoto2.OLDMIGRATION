dnl Process this file with autoconf to produce a configure script.

PACKAGE=gphoto2
VERSION=0.1
libdir=${prefix}/lib/gphoto2

AC_INIT(include/gphoto2.h)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gphoto2, 1.90)
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AM_PROG_LIBTOOL

dnl Checks for libraries.
dnl Replace `main' with a function in -ldl:
AC_CHECK_LIB(dl, main)
dnl Replace `main' with a function in -libs:
AC_CHECK_LIB(ibs, main)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_CHECK_FUNCS(mkdir strdup)

AC_PATH_PROG(LIBGPIO_CONFIG,gpio-config)
if test -n "${LIBGPIO_CONFIG}"; then
  CFLAGS="$CFLAGS `$LIBGPIO_CONFIG --cflags`"
  LIBS="$LIBS `$LIBGPIO_CONFIG --libs`"
else
  AC_MSG_ERROR([
***
*** libgpio is required
*** Available from GNOME CVS module 'libgpio'.
***])
  exit 1
fi

LIBGPHOTO2_INCLUDEDIR='-I${includedir}'
LIBGPHOTO2_LIBDIR='-L${libdir}'
LIBGPHOTO2_LIBS="-lgphoto2"
LIBGPHOTO2_VERSION=$VERSION

AC_SUBST(LIBGPHOTO2_INCLUDEDIR)
AC_SUBST(LIBGPHOTO2_LIBDIR)
AC_SUBST(LIBGPHOTO2_LIBS)
AC_SUBST(LIBGPHOTO2_VERSION)

AC_SUBST(CFLAGS)
AC_SUBST(LIBS)

dnl Find out which drivers to compile
AC_SUBST(SUBDIRS_DRIVERS)
CONFIG_DRIVER_BARBIE=0
CONFIG_DRIVER_DIRECTORY=0
CONFIG_DRIVER_FUJITSU=0
CONFIG_DRIVER_KONICA=0
CONFIG_DRIVER_PANASONIC=0
AC_MSG_CHECKING(which drivers to compile)
AC_ARG_WITH(drivers,
  [  --with-drivers=<list>     compile drivers in <list>; ]
  [                         drivers may be separated with commas; ]
  [                         'all' compiles all drivers; ]
  [                         possible drivers are: ]
  [                         barbie, fujitsu, directory, konica, panasonic ],
  drivers="$withval", drivers="all")
if test "$drivers" = "all"; then
        CONFIG_DRIVER_BARBIE=1
        CONFIG_DRIVER_DIRECTORY=1
        CONFIG_DRIVER_FUJITSU=1
dnl        CONFIG_DRIVER_KONICA=1
	CONFIG_DRIVER_PANASONIC=1
        AC_DEFINE(CONFIG_DRIVER_BARBIE)
        AC_DEFINE(CONFIG_DRIVER_DIRECTORY)
        AC_DEFINE(CONFIG_DRIVER_FUJITSU)
        AC_DEFINE(CONFIG_DRIVER_KONICA)
	AC_DEFINE(CONFIG_DRIVER_PANASONIC)
	AC_MSG_RESULT(all)
else
  drivers=`echo $drivers |sed 's/,/ /g'`
  for driver in $drivers
  do
    case "$driver" in
      barbie)
                CONFIG_DRIVER_BARBIE=1
                AC_DEFINE(CONFIG_DRIVER_BARBIE)
                ;;
      directory)
                CONFIG_DRIVER_DIRECTORY=1
                AC_DEFINE(CONFIG_DRIVER_DIRECTORY)
                ;;
      fujitsu)
                CONFIG_DRIVER_FUJITSU=1
                AC_DEFINE(CONFIG_DRIVER_FUJITSU)
                ;;
      konica)
dnl                CONFIG_DRIVER_KONICA=1
                AC_DEFINE(CONFIG_DRIVER_KONICA)
                ;;
      panasonic)
		CONFIG_DRIVER_PANASONIC=1
		AC_DEFINE(CONFIG_DRIVER_PANASONIC)
		;;
      *)
                echo "Unknown driver $driver, exiting!"
                exit 1
                ;;
    esac
  done
  AC_MSG_RESULT($drivers)
fi
AM_CONDITIONAL(CONFIG_DRIVER_BARBIE, test $CONFIG_DRIVER_BARBIE = "1")
AM_CONDITIONAL(CONFIG_DRIVER_DIRECTORY, test $CONFIG_DRIVER_DIRECTORY = "1")
AM_CONDITIONAL(CONFIG_DRIVER_FUJITSU, test $CONFIG_DRIVER_FUJITSU = "1")
AM_CONDITIONAL(CONFIG_DRIVER_KONICA, test $CONFIG_DRIVER_KONICA = "1")
AM_CONDITIONAL(CONFIG_DRIVER_PANASONIC, test $CONFIG_DRIVER_PANASONIC = "1")
AC_SUBST(CONFIG_DRIVER_BARBIE)
AC_SUBST(CONFIG_DRIVER_DIRECTORY)
AC_SUBST(CONFIG_DRIVER_FUJITSU)
AC_SUBST(CONFIG_DRIVER_KONICA)
AC_SUBST(CONFIG_DRIVER_PANASONIC)


AC_OUTPUT(\
Makefile \
camlibs/Makefile \
camlibs/barbie/Makefile \
camlibs/fujitsu/Makefile \
camlibs/directory/Makefile \
camlibs/panasonic/Makefile \
frontends/Makefile \
frontends/command-line/Makefile \
frontends/libgphoto2_frontend/Makefile \
include/Makefile \
libgphoto2/Makefile \
gphoto2-config \
)
