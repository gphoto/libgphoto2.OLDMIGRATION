dnl Process this file with autoconf to produce a configure script.
AC_PREREQ(2.50)
AC_INIT(libgphoto2_port/gphoto2-port.c)
AM_CONFIG_HEADER(config.h)

dnl ---------------------------------------------------------------------------
dnl Versioning (libgphoto2_port-(AGE.)CURRENT.REVISION):
dnl  - AGE (Micro):      Increment if any interfaces have been added; set to 0
dnl                      if any interfaces have been removed. Removal has 
dnl                      precedence over adding, so set to 0 if both happened.
dnl  - REVISION (Minor): Increment any time the source changes; set to 
dnl                      0 if you incremented CURRENT.
dnl  - CURRENT (Major):  Increment if the interface has additions, changes,
dnl                      removals.
dnl ---------------------------------------------------------------------------
LIBGPHOTO2_PORT_AGE=1
LIBGPHOTO2_PORT_REVISION=5
LIBGPHOTO2_PORT_CURRENT=0
AC_SUBST(LIBGPHOTO2_PORT_AGE)
AC_SUBST(LIBGPHOTO2_PORT_REVISION)
AC_SUBST(LIBGPHOTO2_PORT_CURRENT)
LIBGPHOTO2_PORT_VERSION_INFO=`expr $LIBGPHOTO2_PORT_CURRENT + $LIBGPHOTO2_PORT_REVISION`:$LIBGPHOTO2_PORT_AGE:$LIBGPHOTO2_PORT_REVISION
AC_SUBST(LIBGPHOTO2_PORT_VERSION_INFO)

LIBGPHOTO2_PORT_VERSION=$LIBGPHOTO2_PORT_CURRENT.$LIBGPHOTO2_PORT_REVISION.$LIBGPHOTO2_PORT_AGE
AC_SUBST(LIBGPHOTO2_PORT_VERSION)

VERSION=$LIBGPHOTO2_PORT_VERSION

AM_INIT_AUTOMAKE(libgphoto2_port, $VERSION)
AM_MAINTAINER_MODE
AC_LIBTOOL_DLOPEN

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL

dnl The following is a hack to get gphoto2 to build on gettext-0.10.35
dnl systems - BUILD_INCLUDED_LIBINTL is set only in gettext-0.10.37 which is
dnl the gettext version provided with gphoto2.
BUILD_INCLUDED_LIBINTL=no
AC_SUBST(BUILD_INCLUDED_LIBINTL)
dnl USE_INCLUDED_LIBINTL=no
dnl AC_SUBST(USE_INCLUDED_LIBINTL)

dnl Solaris hack for grep and tr
[
if test -n "`echo $host_os | grep '[sS]olaris'`"; then
  TR=/usr/xpg4/bin/tr
  GREP=/usr/xpg4/bin/grep  
else
  TR=tr
  GREP=grep
fi
]

dnl ---------------------------------------------------------------------------
dnl i18n support
dnl ---------------------------------------------------------------------------
ALL_LINGUAS="da de fr es it ja no ru sl sv uk zh_CN"
AM_GNU_GETTEXT

dnl ---------------------------------------------------------------------------
dnl Check for libtool: lt_dlforeachfile has been introduced in 
dnl                    libtool-1.4. However, there are still systems out
dnl                    there running libtool-1.3. For those, we will need
dnl                    dlopen. Note that on some systems (e.g. FreeBSD)
dnl                    -ldl isn't needed.
dnl ---------------------------------------------------------------------------
AC_PROG_LIBTOOL
have_ltdl=false
ltdl_msg="no"
try_ltdl=true
AC_ARG_WITH(ltdl, [  --without-ltdl            Don't use ltdl],[
        if test x$withval = xno; then
                try_ltdl=false
        fi])
if $try_ltdl; then
        AC_CHECK_LIB(ltdl, lt_dlforeachfile,[
                AC_CHECK_HEADER(ltdl.h,[
                        AC_DEFINE(HAVE_LTDL,1,[whether we use libltdl])
                        LTDL_LIBS="-lltdl"
                        ltdl_msg="yes"
                        have_ltdl=true])])
fi
if ! $have_ltdl; then
        AC_CHECK_FUNC(dlopen,,[
                AC_CHECK_LIB(dl, dlopen,[LTDL_LIBS="-ldl"],[AC_ERROR([
*** Could not determine how to handle
*** shared libraries!])])])
fi
AC_SUBST(LTDL_LIBS)

AC_CHECK_FUNC(gettext, gettext_without_libintl=true)
# same trick as with libdl in libgphoto2:
# if gettext() doesn't require linking against libintl,
# we don't have to check for gettext in libintl. Otherwise
# we may even require libintl.
dnl AC_CHECK_LIB(intl, gettext, [LIBS="$LIBS -lintl"])
if test "$gettext_without_libintl" != "true" -a "$USE_NLS" = "yes"; then
        AC_CHECK_LIB(intl, gettext, [INTLLIBS="$INTLLIBS -lintl"])
fi

dnl Turn on debugging and catch GNU features incompatible with ANSI C.
if test "$ac_cv_prog_gcc" = "yes"; then
	CFLAGS="$CFLAGS -g -Wall -Wmissing-declarations -Wmissing-prototypes"
	LDFLAGS="$LDFLAGS -g -Wall"
fi

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC

AC_INLINE
AC_CONST

AC_CHECK_HEADERS(stdlib.h unistd.h stdio.h fcntl.h errno.h sys/time.h	\
	sys/param.h termios.h sgetty.h ttold.h ioctl-types.h		\
	fcntl.h sgtty.h sys/ioctl.h sys/time.h termio.h unistd.h	\
	endian.h byteswap.h asm/io.h)

dnl Checks for library functions.
AC_CHECK_FUNCS(strerror snprintf vsnprintf)

dnl Check if TIOCM_RTS is included in one of several possible files
AC_TRY_COMPILE([#include <termios.h>], [int foo = TIOCM_RTS;],
			AC_DEFINE(HAVE_RTS_IOCTL,1,[Define if you have TIOCM_RTS.]))
AC_TRY_COMPILE([#include <termio.h>], [int foo = TIOCM_RTS;],
			AC_DEFINE(HAVE_RTS_IOCTL,1,[Define if you have TIOCM_RTS.]))
AC_TRY_COMPILE([#include <ioctl-types.h>], [int foo = TIOCM_RTS;],
			AC_DEFINE(HAVE_RTS_IOCTL,1,[Define if you have TIOCM_TRS.]))
AC_TRY_COMPILE([#include <sys/ioctl.h>], [int foo = TIOCM_RTS;],
			AC_DEFINE(HAVE_RTS_IOCTL,1,[Define if you have TIOCM_TRS.]))

dnl ******
dnl serial
dnl ******
serial_msg=yes
have_serial=true
baudboy_msg=no
ttylock_msg=no
lockdev_msg=no
try_baudboy_msg=true
try_ttylock=true
try_lockdev=true
AC_ARG_WITH(serial, [  --without-serial        Don't compile in SERIAL support],
	if test x$withval = xno; then
		have_serial=false
		serial_msg=no
		try_baudboy=false
		try_ttylock=false
		try_lockdev=false
	fi
)
if $have_serial; then
	IOLIB_SUBDIRS="$IOLIB_SUBDIRS serial"
fi
case "$serial_msg" in
	yes*) AC_DEFINE(HAVE_SERIAL,1,[Whether you have serial support enabled])
	*     ;;
esac

dnl -----------------------------------------
dnl Serial port locking: We try to use either
dnl  (1) baudboy.h
dnl  (2) ttylock.h
dnl  (3) lockdev.h
dnl -----------------------------------------
AC_ARG_WITH(baudboy, [  --without-baudboy       Don't use baudboy library],
	if test x$withval = xno; then
		try_baudboy=false
	fi
)
AC_ARG_WITH(ttylock, [  --without-ttylock       Don't use ttylock library],
	if test x$withval = xno; then
		try_ttylock=false
	fi
)
AC_ARG_WITH(lockdev, [  --without-lockdev       Don't use lockdev library],
	if test x$withval = xno; then
		try_lockdev=false
	fi
)
if $try_baudboy; then
	AC_CHECK_HEADER(baudboy.h,
		baudboy_msg=yes
		try_ttylock=false
		try_lockdev=false
		AC_DEFINE(HAVE_BAUDBOY,1,[Define if you have Baudboy serial locking.])
	)
fi
if $try_ttylock; then
	AC_CHECK_HEADER(ttylock.h,
		AC_MSG_CHECKING(if ttylock needs lockdev)
		AC_TRY_LINK([#include <ttylock.h>],[ttylocked ("/dev/foo");],
			AC_MSG_RESULT(no)
			AC_DEFINE(HAVE_TTYLOCK,1,[Define if you have ttylock based tty locking.])
			ttylock_msg=yes
			try_lockdev=false,
			LDFLAGS="$LDFLAGS -llockdev"
			AC_TRY_LINK([#include <ttylock.h>],[ttylocked ("/dev/foo");],
				AC_MSG_RESULT(yes)
				AC_DEFINE(HAVE_TTYLOCK,1,[Define if you have ttylock based tty locking.])
				ttylock_msg=yes
				try_lockdev=false
				SERIAL_LFLAGS=-llockdev,
				AC_MSG_RESULT(unknown),
				AC_MSG_RESULT(unknown)
			),
			AC_MSG_RESULT(unknown)
		)
	)
fi
if $try_lockdev; then
	AC_CHECK_LIB(lockdev, dev_lock,[
		    AC_CHECK_HEADER(lockdev.h,[
				AC_DEFINE(HAVE_LOCKDEV,1,[Define if you have dev_lock/lockdev based locking.])
				lockdev_msg=yes
				SERIAL_LFLAGS=-llockdev
			    ]
		    )
		]
	)
fi
AC_SUBST(SERIAL_LFLAGS)

dnl ******
dnl libusb
dnl ******
usb_msg="no (required for USB cameras, http://sourceforge.net/projects/libusb/)"
try_usb=true
AC_ARG_WITH(usb, [  --without-usb           Don't compile in USB support],
	if test x$withval = xno; then
		try_usb=false
	fi
)
if $try_usb; then
	AC_PATH_PROG(LIBUSB_CONFIG,libusb-config)
	if test -n "${LIBUSB_CONFIG}"; then
		CPPFLAGS_save="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS `$LIBUSB_CONFIG --cflags`"
		AC_CHECK_HEADER(usb.h,[
			LDFLAGS_orig="$LDFLAGS"
			LDFLAGS="`$LIBUSB_CONFIG --libs`"
			AC_CHECK_LIB(usb,usb_busses,[
				usb_msg="yes"
				IOLIB_SUBDIRS="$IOLIB_SUBDIRS usb"
				USB_LIBS="`$LIBUSB_CONFIG --libs`"
				USB_CFLAGS="`$LIBUSB_CONFIG --cflags`"
                        	LIBUSB_VER="`$LIBUSB_CONFIG --version`"],[
				usb_msg="no (available version too old)"])
			LDFLAGS="$LDFLAGS_orig"])
		CPPFLAGS="$CPPFLAGS_save"
	fi

	# This 'test' call uses non-standard syntax and will fail on most
	# systems, but it's just informational so any warning can be ignored.
	if test "$LIBUSB_VER" \< "0.1.5"; then
		AC_MSG_WARN([
*** You need at least version 0.1.5 of the libusb library for USB support
*** http://sourceforge.net/projects/libusb/
*** If you cannot find the appropriate version, try CVS
	])
	fi
fi
case "$usb_msg" in
	yes*) AC_DEFINE(HAVE_USB,1,[Whether you have USB support enabled])
	*     ;;
esac

AC_SUBST(USB_CFLAGS)
AC_SUBST(USB_LIBS)

AC_SUBST(IOLIB_SUBDIRS)

dnl **********
dnl GNU regex?
dnl **********
AC_CHECK_FUNC(re_compile_pattern, AC_DEFINE(HAVE_GNU_REGEX,1,[Define if you have GNU regex.]))

dnl ******************************
dnl disable debugging if requested
dnl ******************************
AC_ARG_ENABLE(debugging,
  [  --disable-debugging     do not include debugging code],
  [if test "$enableval" = "no"; then
    AC_DEFINE(DISABLE_DEBUGGING,1,[Define if you want to disabled debugging.])
  fi])

dnl ********
dnl gtk-doc?
dnl ********
GP_CHECK_DOC_DIR()dnl
GP_BUILD_DOCS()dnl

AC_OUTPUT([
libgphoto2_port.spec
Makefile
libgphoto2_port/Makefile
serial/Makefile
usb/Makefile
gphoto2-port-config
test/Makefile
doc/Makefile
m4/Makefile
])

echo "

Configuration (libgphoto2_port)

	Source code location:    ${srcdir}
	Compiler:                ${CC}

	SERIAL support:          $serial_msg

	Locking mechanism (for serial ports):
	Use baudboy:             $baudboy_msg
	Use ttylock:             $ttylock_msg
	Use lockdev:             $lockdev_msg

	USB support:             $usb_msg

	Build API documentation: $gtkdoc_msg
	Use ltdl.h:              $ltdl_msg
"
