<!DOCTYPE BOOK PUBLIC "-//Davenport//DTD DocBook V3.0//EN" [
<!entity libgpio-gpio-ieee1394 SYSTEM "sgml/gpio-ieee1394.sgml">
<!entity libgpio-gpio-network SYSTEM "sgml/gpio-network.sgml">
<!entity libgpio-gpio-parallel SYSTEM "sgml/gpio-parallel.sgml">
<!entity libgpio-gpio-serial SYSTEM "sgml/gpio-serial.sgml">
<!entity libgpio-gpio-usb SYSTEM "sgml/gpio-usb.sgml">
<!entity libgpio-gpioos2 SYSTEM "sgml/gpioos2.sgml">
<!entity libgpio-gpio SYSTEM "sgml/gpio.sgml">
]>

<book>
  <bookinfo>
    <title>GPIO (gPhoto I/O) Library Reference Manual</title>
    <abstract>
      <para>
	This manual documents the GPIO, the GPhoto I/O library.
	It gives an overview of GPIO, discusses examples that
	come with GPIO and includes detailed documentation of
	the GPIO API.
      </para>
    </abstract>
  </bookinfo>

  <chapter id="gpio-overview">
    <title>GPIO Overview</title>
    
    <para>
      GPIO is the GPhoto I/O library.
    </para>
    
    <para>
      The benefit to using this library would be that all communications can be
      done quickly and without worry for device specific functions; all devices
      are abstracted to a point, allowing you to read/write to a device using
      the same interface. For example, you can set all the options on the
      serial port easily, and then read/write to that device. Additionally,
      you could easily switch over to a USB device, and read/write without
      having to learn the USB internals.
    </para>

    <para>
      The whole idea behind this is simplicity. It should be easy to write a
      program that uses any sort of serial-based device. This will take the
      hassle out of playing with low-level configurations and actually just
      get on to writing the core of the application.
    </para>
    
    &libgpio-gpio;
    &libgpio-gpio-usb;
    &libgpio-gpio-serial;
    &libgpio-gpio-network;
    &libgpio-gpio-parallel;
    &libgpio-gpio-ieee1394;
    &libgpio-gpioos2;
  </chapter>
</book>
